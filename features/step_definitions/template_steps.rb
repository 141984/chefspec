Given /^a Chef cookbook with a recipe that declares a (missing )?template resource( with the template from another cookbook)?$/ do |missing,another_cookbook|
  template_name = missing.nil? ? 'config_file.erb' : 'wrong_name.erb'
  template_cookbook = another_cookbook.nil? ? 'example' : 'another'
  steps %Q{
    Given a file named "cookbooks/example/recipes/default.rb" with:
    """ruby
      template "/etc/config_file" do
        action :create
        variables({:platform => node[:platform]})
        #{another_cookbook.nil? ? '': 'cookbook "another"'}
      end
    """
    And a file named "cookbooks/#{template_cookbook}/templates/default/#{template_name}" with:
    """erb
    # Config file generated by Chef
    platform: <%= @platform %>

    """
  }
end

Given /^the recipe has a spec example that expects the template to be rendered$/ do
  steps %q{
    Given a file named "cookbooks/example/spec/default_spec.rb" with:
    """ruby
      require "chefspec"

      describe "example::default" do
        let(:chef_run) {ChefSpec::ChefRunner.new.converge 'example::default'}
        it "should create a file with the node platform" do
          chef_run.should create_file '/etc/config_file'
        end
      end
    """
  }
end

Given /^the recipe has a spec example of the rendered template$/ do
  steps %q{
    Given a file named "cookbooks/example/spec/default_spec.rb" with:
    """ruby
      require "chefspec"

      describe "example::default" do
        let(:chef_run) {ChefSpec::ChefRunner.new.converge 'example::default'}
        it "should create a file with the node platform" do
          expected_content = <<-EOF.gsub /^\s*/, ''
            # Config file generated by Chef
            platform: chefspec
          EOF
          chef_run.should create_file_with_content('/etc/config_file', expected_content)
        end
      end
    """
  }
end